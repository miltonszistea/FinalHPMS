@using FinalHPMS.ViewModels;
@model TicketCreateViewModel;

@{
    ViewData["Title"] = "Create";
}
<head>
    <link href="~/css/site.css" rel="stylesheet" />
</head>
<body class="green-bg">
    <h1>Generar nueva venta</h1>

    <h4>Datos para facturación</h4>
    <hr />
    <form id="ticketForm" asp-action="Create">
        <div class="row">

            <div class="col-md-6">

                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="form-group">
                    <label asp-for="Clients" class="control-label"></label>
                    @Html.DropDownListFor(model => model.ClientId,
                    new SelectList(Model.Clients, "Id", "Name"),
                    "Seleccione",
                    new { @class = "form-control" })
                </div>
                <div class="form-group">
                    <label asp-for="Communities" class="control-label"></label>
                    @Html.DropDownListFor(model => model.CommunityId,
                    new SelectList(Model.Communities, "Id", "Name"),
                    "Seleccione",
                    new { @class = "form-control" })
                </div>

                <div class="form-group">
                    <label asp-for="DateAndHour" class="control-label">Fecha y hora</label>
                    <input asp-for="DateAndHour" class="form-control" readonly="readonly" />
                    <span asp-validation-for="DateAndHour" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="PaymentMethod" class="control-label"></label>
                    <select asp-for="PaymentMethod" asp-items="Html.GetEnumSelectList<PaymentMethod>()" class="form-control">
                    </select>
                </div>

                <div class="form-group">
                    <label asp-for="Total" class="control-label"></label>
                    <input readonly asp-for="Total" class="form-control" />
                    <span asp-validation-for="Total" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <input type="submit" value="Generar ticket" class="btn btn-warning" />
                </div>
            </div>
            <div class="col-md-6">

                <div class="form-group">
                    <label asp-for="Products" class="control-label"></label>
                    <input type="hidden" asp-for="SelectedProducts" id="SelectedProducts" name="SelectedProducts" class="form-control" />

                    <table class="table">
                        <thead>
                            <tr>
                                <th>Seleccionar</th>
                                <th>Descripción</th>
                                <th>Precio</th>
                                <th>Stock</th>
                                <th>Cantidad</th>
                            </tr>
                        </thead>
                        <tbody id="tbProducts">
                        </tbody>
                    </table>
                </div>

            </div>

        </div>
    </form>

    <div>

        <a asp-action="Index">Volver al Listado de Tickets</a>
    </div>
</body>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");

        <script>
            $(document).ready(function () {

                $('#CommunityId').change(function () {
                    var selectedValue = $(this).val();
                    $.ajax({
                        url: '@Url.Action("GetProductsByCommunityId", "Ticket")',
                        type: 'GET',
                        data: { id: selectedValue },
                        success: function (data) {

                            $("#tbProducts").empty();

                            $.each(data, function (index, product) {
                                var newRow = $("<tr>");

                                var checkboxCell = $("<td>").append('<input type="checkbox" name="selectedProducts" value="' + product.id + '" onchange="handleCheckboxChange();" /> ');
                                newRow.append(checkboxCell);

                                var nameCell = $("<td>").text(product.name);
                                newRow.append(nameCell);

                                var priceCell = $("<td>").text(product.price);
                                newRow.append(priceCell);

                                var stockCell = $("<td>").text(product.stock);
                                newRow.append(stockCell);

                                var quantityCell = $("<td>").append('<input type="number" name="stockQuantities" class="form-control" onkeypress="handleCheckboxChange();" />');
                                newRow.append(quantityCell);

                                $("#tbProducts").append(newRow);
                            });
                        },
                        error: function (xhr, status, error) {
                            console.error(status, error);
                            console.log(xhr.responseText);
                        }
                    });
                });

                $('#PaymentMethod').change(function () {
                    handleCheckboxChange();
                });

                $('#tbProducts').on('change', 'input[name="stockQuantities"]', function () {
                    // Maneja el cambio de la cantidad en tiempo real
                    var quantityInput = $(this);
                    var row = quantityInput.closest('tr');
                    var stock = parseFloat(row.find('td:eq(2)').text());
                    var cantidad = parseFloat(quantityInput.val());

                    // Realiza las validaciones de cantidad
                    if (isNaN(cantidad) || cantidad < 0 || cantidad > stock) {
                        alert('La cantidad ingresada no es válida.');
                        // Puedes realizar otras acciones aquí, como desactivar el checkbox o cambiar el color del campo
                        quantityInput.val(0);  // O establece la cantidad a un valor válido
                    }

                    // Llama a la función para recalcular el total
                    handleCheckboxChange();
                });

                // Validación de Precio
                $('#tbProducts').on('change', 'input[name="price"]', function () {
                    // Maneja el cambio del precio en tiempo real
                    var priceInput = $(this);
                    var row = priceInput.closest('tr');
                    var price = parseFloat(priceInput.val());

                    // Realiza las validaciones de precio
                    if (isNaN(price) || price < 0 || price > 999999999) {
                        alert('El precio ingresado no es válido.');
                        // Puedes realizar otras acciones aquí, como desactivar el checkbox o cambiar el color del campo
                        priceInput.val(0);  // O establece el precio a un valor válido
                    }

                    // Llama a la función para recalcular el total
                    handleCheckboxChange();
                });
            });

            function handleCheckboxChange() {
                var selectedProducts = [];

                $('input[name="selectedProducts"]:checked').each(function () {
                    var row = $(this).closest('tr');
                    var idSelected = row.find('input[name="selectedProducts"]').val();
                    var stock = row.find('td:eq(2)').text();
                    var cantidad = row.find('input[name="stockQuantities"]').val();

                    selectedProducts.push({ Id: idSelected, Stock: stock, Quantity: cantidad });
                });

                $('#SelectedProducts').val(JSON.stringify(selectedProducts));

                var total = 0;

                // Itera sobre los productos seleccionados
                for (var i = 0; i < selectedProducts.length; i++) {
                    var producto = selectedProducts[i];

                    // Verifica si la cantidad está presente y es un número válido
                    if (producto.Quantity !== undefined && !isNaN(producto.Quantity)) {
                        var subtotal = parseFloat(producto.Stock) * parseFloat(producto.Quantity);
                        total += subtotal;
                    }
                }

                // Aplica el descuento del 5% si el método de pago es "Cash"
                var paymentMethod = parseInt($('#PaymentMethod').val());

                if (paymentMethod === 1) {
                    var descuento = total * 0.05;
                    total -= descuento;
                }

                if (paymentMethod === 2) {
                    var descuento = total * 0.02;
                    total -= descuento;
                }

                if (isNaN(total)) {
                    total = 0;
                }

                $('#Total').val(total.toFixed(2));
            }
        </script>
    }
}
